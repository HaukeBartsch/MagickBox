#!/bin/bash
#
# A script to rule the buckets
# We want to be able to install and deinstall a bucket based
# on its docker file only. Users would install a bucket
# by specifying the docker file which would in turn create
# a /data/streams/bucket directory with all the required
# files and add the bucket monit (gearman entry).
# 

if [ $# -eq 0 ]
then
   echo "Usage: bucket install <docker image name>"
   echo " This requires an existing docker image (can be created with bucket create)."
   echo "   or: bucket remove <docker image name>"
   echo " This will not remove the docker container image, only MB local files."
   echo "   or: bucket create <docker image name>"
   echo " This should work on any system that supports docker. It creates an initial MB"
   echo " docker image which can be used with bucket install."
   echo "   or: bucket open <docker image name>"
   echo " Start the editor included inside a bucket. Open the interface on a website."
   exit 1
fi

force=0
create=0
install=0
remove=0
open=0
while [[ $# > 0 ]]
do
  key="$1"

  case $key in
      install)
      install=1
      what="$2"
      shift
      ;;
      remove)
      remove=1
      what="$2"
      shift
      ;;
      create)
      create=1
      what="$2"
      shift
      ;;
      open)
      open=1
      what="$2"
      shift
      ;;
      force|-f)
      force=1
      ;;
      *)
	echo "unknown option"
	exit 1
      ;;
  esac
  shift
done 

if [ "$install" == 0 ] && [ "$remove" == 0 ] && [ "$create" == 0 ] && [ "$open" == 0 ]
then
   echo "Error: either install or removed or create, it needs to be one of them"
   exit 1
fi

# what would be the name for this bucket?
if [ $what == "" ]
then
   echo "This command requires a valid docker container known to this machine"
   exit 1
fi
if [ $what == "01" ] || [ $what == "02" ]; then
   echo "Error: bucket01 and bucket02 are system buckets and cannot be changed by this script"
   exit 1
fi

# open the editor for the bucket
if [ "$open" = 1 ]; then
  which docker > /dev/null
  if [ ! $? -eq 0 ]; then
     echo "Could not call docker on this system, this is required to create an MB container"
     exit 1
  fi
  # check if that container already exists
  RUNNING=$(docker inspect $what 2> /dev/null)
  if [ ! $? -eq 0 ]; then
     echo "Error: Bucket does not exists. Please create a container first (bucket create <bucket name>)."
     exit 1
  fi
  # could check if the container has our file structure to make sure (todo)

  echo "Open a webbrowser and point it at http://localhost:8080 (Ctrl-C to stop)."
  R=$( docker run -i -t -p 8080:8080 -p 8022:8022 ${what} )
  exit 0
fi

if [ "$create" = 1 ]; then
  which docker > /dev/null
  if [ ! $? -eq 0 ]; then
     echo "Could not call docker on this system, this is required to create an MB container"
     exit 1
  fi
  # create a shell container now
  RUNNING=$(docker inspect $what 2> /dev/null)
  if [ $? -eq 0 ]; then
     echo "Error: This container exists already. Please make the name of the container unique."
     exit 1
  fi
  echo "Creating new container..."  
  DIR=`mktemp -d`
  cat >$DIR/info.json <<EOF
{
  "name": "${what}",
  "description": "Describe briefly what this bucket does",
  "version": "0.0",
  "AETitle": "${what}",
  "enabled": 1
}
EOF
  cat >$DIR/work.sh <<EOF
#!/bin/bash

if [ $# -ne 2 ];
then
   echo "usage: work.sh <dicom directory> <output directory>"
   exit; 
fi

input="\$1"
output="\$2"

# Add the call to your installed program here.
#    ./myprogram "\${input}" "\${output}"
# Any result should be copied to \${output}. Don't change anything in \${input}.

echo "Done..."
EOF
  cat >$DIR/bucket.conf <<EOF
# editor page for MagickBox buckets
server {
   listen 8080 default_server;
   listen [::]:8080 default_server ipv6only=on;

   root /usr/share/nginx/html;
   index index.html index.php
   server_name localhost;

   location ~ \.php$ {
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      fastcgi_pass unix:/var/run/php5-fpm.sock;
      fastcgi_index index.php;
      include fastcgi_params;
   }
}
EOF
  cat >$DIR/index.html <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
  <title>MagickBox bucket ${what}</title>
  <style type="text/css" media="screen">
     #editor {
        position: relative;
        height: 1000px;
        top: 0; bottom: 0; left: 0; right: 0;
     }
  </style>
  <link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/css/bootstrap.min.css"></link>
</head>
<body>
  <div class="container" style="margin-top: 50px;">
    <div class="row">
      <div class="col-xm-3 col-md-3 col-xs-3 col-lg-3">
         <table class="table table-striped">
           <thead>
             <tr><th></th></tr>
           </thead>
           <tbody>
             <tr><td><a href="#" onclick="load('info.json');">info.json</a></td></tr>
             <tr><td><a href="#" onclick="load('work.sh');">work.sh</a></td></tr>
           </tbody>
         </table>
         <div class="btn-group">
            <button id="save-current" class="btn btn-default" onclick="save();">Save</button>
         </div>
      </div>
      <div class="col-xm-9 col-xs-9 col-md-9 col-lg-9">
         <div id="editor"></div>
      </div>
    </div>
  </div>

  <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/js/bootstrap.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/ace/1.1.9/ace.js"></script>
  
  <script>
    current="";
    editor="";
    function load( what ) {
      if (what == "info.json" || what == "work.sh") {
         jQuery.get('getFile.php?file='+what, function(data) {
            editor.setValue(data);
            current=what;
         });
      }
    }
    function save() {
      if (current == "") {
         return;
      }
      data = {};
      data.text = editor.getValue();
      jQuery.post('saveFile.php', { 'file': current, 'data': editor.getValue() });
    }

    jQuery(document).ready(function() {
      editor = ace.edit("editor");
      editor.setTheme("ace/theme/tomorrow_night_eighties");
      editor.session.setMode("ace/mode/html");
      editor.setAutoScrollEditorIntoView(true);
      editor.setOption("maxLines", 30);
      load("info.json");
    });
  </script>
</body>
</html>
EOF

  cat >$DIR/getFile.php <<EOF
<?php
   \$file="info.json";
   if (isset(\$_GET['file'])) {
      \$file = \$_GET['file'];
   }

   echo(file_get_contents(\$file));
?>
EOF
  cat >$DIR/saveFile.php <<EOF
<?php
   \$file="";
   if (isset(\$_POST['file'])) {
      \$file = \$_POST['file'];
   } else {
      return; // ignore
   }
   \$data = "";
   if (isset(\$_POST['data'])) {
      \$data = \$_POST['data'];
   }

   \$fp = fopen(\$file, 'w');
   fwrite(\$fp, \$data);   
   fclose(\$fp);
?>
EOF

  cat >$DIR/startservices.sh <<EOF
#!/bin/bash
  service php5-fpm start &
  sleep 2
  nginx
EOF

  cwd=`pwd`
  cd $DIR
  cat >$DIR/Dockerfile <<EOF
#####################################
# Docker file to build a bucket for MagickBox
# based on ubuntu
#####################################
FROM ubuntu

RUN mkdir -p /root/storage/interface && \
    apt-get update && \
    apt-get install -y nginx php5-common php5-cli php5-fpm && \
    rm -rf /var/lib/apt/lists/* && \
    echo "\ndaemon off;" >> /etc/nginx/nginx.conf && \
    chown -R www-data:www-data /var/lib/nginx && \
    chown -R www-data:www-data /root/storage/interface && \
    chmod g+s /root/storage/interface
COPY info.json /usr/share/nginx/html/
COPY work.sh /usr/share/nginx/html/
COPY bucket.conf /etc/nginx/sites-enabled/
COPY index.html /usr/share/nginx/html/
COPY getFile.php /usr/share/nginx/html/
COPY saveFile.php /usr/share/nginx/html/
COPY startservices.sh /
RUN chmod gou+rx /startservices.sh && \
    chown -R www-data:www-data /usr/share/nginx/html && \
    ln -s /usr/share/nginx/html/info.json /root/storage/info.json && \
    ln -s /usr/share/nginx/html/work.sh /root/work.sh
EXPOSE 8080
CMD /startservices.sh
EOF
#
#    cd /opt/ && wget http://mmil.ucsd.edu/MagickBox/WebShell-0.9.6.zip -q && \
#    unzip WebShell-0.9.6.zip && \
#    rm WebShell-0.9.6.zip && \
#    cd /opt/WebShell-0.9.6 && \
#    ./make_certificate.sh

  docker build --no-cache -t "$what" "$DIR"
  cd $cwd
  echo ""
  echo ""
  echo "Done! A new bucket has been created (\"$what\")."
  echo "Start using it by:"
  echo "  docker run -i -t -p 8080:8080 ${what} /bin/bash"
  echo "and edit the work.sh script in:"
  echo "  vi /root/work.sh"
  echo ""

  exit 0
fi

# this next step requires jq
JQ=`which jq`
if [ $? -eq 1 ]; then
   echo "Error: this script requires jq, lets try to download the executable..."
   # try to download jq
   WG=`which wget`
   if [ $? -eq 1 ]; then
      echo "Tried to download jq but could not (no wget, giving up now...)"
      exit 1
   fi
   wget http://stedolan.github.io/jq/download/linux64/jq 2> /dev/null
   if [ ! -f jq ]; then
      echo "Error: could not download jq, giving up"
      exit 1
   fi
   chmod gou+rx jq
   JQ=./jq
fi

if [ "$EUID" -ne 0 ]; then
   echo "Please run as root using sudo (for install or remove)..."
   exit 1
fi

RUNNING=$(docker inspect $what 2> /dev/null)
if [ $? -eq 1 ]
then
  echo "Error: docker container does not exist, import the container first, call this script again afterwards..."
  exit 1
fi
# ok we have a container
echo "Found the container image \"$what\". Query for included items."
# first one we need is /root/storage/info.json
INFO=$(docker run $what /bin/bash -c "cat /root/storage/info.json;exit")
echo "We found this information:"
echo $INFO | $JQ "."

# now we can create the bucket directory
AETitle=`echo $INFO | $JQ ".AETitle" | sed -e 's/\"//g'`
DESCRIPTION=`echo $INFO | $JQ ".Description"`
DATESTR=`date`
bucket=/data/streams/bucket${AETitle}

echo "Based on the information found in \"$what\" this should be bucket \"$bucket\"..."

if [ -d "$bucket" ] && [ "$install" == 1 ] && [ "$force" == 0 ]; then
   echo "Error: This bucket exists already. If you really want to do this again use the -f flag"
   exit 1
fi

# install this bucket
if [ "$install" == 1 ]; then
   # create the bucket directory first
   mkdir -p "$bucket"
   # put a copy of the config file into this directory
   echo $INFO | $JQ "." > "$bucket/info.json"
   # a gearman worker that will do something
   cat >$bucket/gearman-worker.sh <<EOF
#!/bin/sh
# gearman worker created by MB

pidfile=/data/.pids/gearman-worker-bucket${AETitle}.pid

case \$1 in
    'start')
	echo "starting gearman for bucket${AETitle}..."
	/usr/local/bin/gearman -h 127.0.0.1 -p 4730 -w -f "bucket${AETitle}" -- xargs -0 ${bucket}/work.sh &
	pid=\$!
	echo \$pid > \$pidfile
	;;
    'stop')
	/usr/bin/pkill -F \$pidfile
	RETVAL=\$?
	[ \$RETVAL -eq 0 ] && rm -f \$pidfile
	;;
    *)
	echo "usage: gearman-worker-bucket${AETitle}.sh { start | stop }"
	;;
esac
exit 0
EOF
   chmod gou+rx $bucket/gearman-worker.sh

   # In case we need more than one worker we could create more of these with different names...

   # a configuration file for monit that starts this bucket (done with root permissions)
   sudo cat >/etc/monit/conf.d/processing-${AETitle}.conf <<EOF
check process gearman-${AETitle} with matching "gearman.*-w.*-f.*bucket${AETitle}"
      start program = "/data/streams/bucket${AETitle}/gearman-worker.sh start"
     	   as uid processing and gid processing
      stop program = "/data/streams/bucket${AETitle}/gearman-worker.sh stop"
     	   as uid processing and gid processing
EOF

  # a work script that process.sh in bucket01 can call
  cat >$bucket/work.sh <<EOF
#!/bin/bash -l
#
# This script is called by other scripts using the gearman${AETitle} worker.
# ${Description}
# (installed by bucket on $DATESTR)

log=/data/logs/bucket${AETitle}.log

if [ \$# -eq 0 ]
then
   echo "usage: work.sh <DICOM directory>"
   echo "usage: work.sh <DICOM directory>" >> \$log
   exit 1
fi

INP=\$1
INP=( \$INP )
if [ \${#INP[@]} -eq 2 ]
then
  DATA=\${INP[0]}
  DATA=\`readlink -f \$DATA\`
  OUTPUT=\${INP[1]}
  OUTPUT=\`readlink -f \$OUTPUT\`
else
  echo "\`date\`: bucket${AETitle} error, not enough parameters for processing..." >> \$log
  exit 1
fi

echo "\`date\`: ${AETitle} processing (\$DATA) start..." >> \$log

mkdir -p \${OUTPUT}

echo "\`date\`: use \${DATA} and \${OUTPUT} as directories for processing" >> \$log

read s1 < <(date +'%s')
JOB=\$(sudo /usr/bin/docker run -d -v "\${DATA}":/input -v "\${OUTPUT}":/output $what /bin/bash -l -c "/root/work.sh /input /output" )
JOB=\`echo \$JOB | cut -c1-8\`
echo "\`date\`: ID for docker job is \"\$JOB\"" >> \$log
sleep 10

EX=1
while [ $EX -eq 1 ]; do
  sudo /usr/bin/docker logs \$JOB > \${OUTPUT}/../processing.log
  sleep 10
  EX=\$(sudo /usr/bin/docker ps | grep \$JOB | wc -l)
done
read s2 < <(date +'%s')
echo "\`date\`: ${AETitle} processing (\$JOB) required \$((s2-s1)) seconds" >> \$log 

echo "[{\"success\": \"success\",\"message\": \"\"}]" > "\${OUTPUT}/../proc.json"

echo "\`date\`: processing ${AETitle} (\$DATA) done" >> \$log
EOF
  chmod gou+rx $bucket/work.sh

  # now restart monit
  echo "As the last step reload monit again..."
  sudo monit reload

  # done with install
  exit 0
fi

if [ "$remove" == 1 ]; then

  if [ -d "$bucket" ]; then
     # found a bucket directory
     echo -n "Found a directory \"$bucket\". Delete? (Yes/No) "
     read yesno
     if [ $yesno == "Yes" ]; then
        echo "Delete directory..."
        /bin/rm -rf $bucket
        # and remove the monit file
	f=/etc/monit/conf.d/processing-${AETitle}.conf
	echo "Delete monit file at \"$f\"."
        sudo /bin/rm $f
	# and reload monit again
	sudo monit reload
     else
        echo "directory not deleted..."
     fi
  else
     echo "The bucket \"$bucket\" could not be found. Nothing is done."
  fi
  exit 0
fi
